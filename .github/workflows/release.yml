name: Build, Publish & Release

on:
  push:
    tags:
      - 'v*.*.*'         # trigger on tags (e.g. v1.10.0)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 1.10.0) for manual run'
        required: false

env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}
  REPOSITORY_SHORT: vfg

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.vars.outputs.TAG }}
      version: ${{ steps.vars.outputs.VERSION }}
    strategy:
      matrix:
        include:
        - service: frontend
          dir: frontend        # build context / path to Dockerfile
          short: fe            # short alias used in tags (vagrantfile-generator-fe)
        - service: backend
          dir: backend
          short: be
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Determine version and tag
        id: vars
        run: | #shell
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
              TAG="v${VERSION}"
            else
              echo "No version provided for manual run. Use the 'version' input." >&2
              exit 1
            fi
          else
            # when triggered by tag push
            REF=${GITHUB_REF#refs/tags/}
            TAG="$REF"
            VERSION="${TAG#v}"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.dir }}                # build context -> frontend/ or backend/
          file: ${{ matrix.dir }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.REPOSITORY }}-${{ matrix.short }}:${{ steps.vars.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.REPOSITORY }}-${{ matrix.short }}:latest

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Needed to create or update GitHub release
      packages: read       # Only need to read GHCR info
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Extract release notes from CHANGELOG.md
        id: notes
        run: | #shell
          VERSION="${{ needs.build-and-push.outputs.version }}"
          # awk: print lines under the matching "## ... Version X.Y.Z ..." header
          awk -v ver="$VERSION" '
            BEGIN {found=0}
            /^## .*Version[[:space:]]/ {
              if (found) exit
              if ($0 ~ ver) { found=1; next }
            }
            { if (found) print }
          ' CHANGELOG.md > release_notes.md
          if [ ! -s release_notes.md ]; then
            echo "No changelog entry found for $VERSION" > release_notes.md
          fi
          # trim leading blank lines
          sed -i '1{/^$/d;}' release_notes.md
          # write to GITHUB_OUTPUT
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or update GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-push.outputs.tag }}
          name: "Release ${{ needs.build-and-push.outputs.version }}"
          body: ${{ steps.notes.outputs.notes }}
          files: docker-compose.yml
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

