"""
VagrantfileGenerator service for Vagrantfile GUI Generator.

This service generates Vagrantfile content from Project configurations
using Jinja2 templates.
"""

from typing import Dict, Any, List, Tuple
from jinja2 import Environment, BaseLoader, Template

from ..models import Project, VirtualMachine, NetworkInterface, SyncedFolder, Provisioner, PluginConfiguration


class StringTemplateLoader(BaseLoader):
    """Simple loader for string templates."""
    
    def __init__(self, template_string: str):
        self.template_string = template_string
    
    def get_source(self, environment, template):
        return self.template_string, None, lambda: True


class VagrantfileGenerator:
    """Service for generating Vagrantfiles from Project configurations."""
    
    # Default Vagrantfile template
    VAGRANTFILE_TEMPLATE = '''# -*- mode: ruby -*-
# vi: set ft=ruby :

# Generated by Vagrantfile GUI Generator
# Project: {{ project.name }}
{% if project.description %}# Description: {{ project.description }}
{% endif %}# Generated: {{ generation_timestamp }}

Vagrant.configure("2") do |config|
{% if project.global_plugins %}
  # Configure required plugins
  config.vagrant.plugins = [
{% for plugin in project.global_plugins %}
{% if plugin.version %}
    { name: "{{ plugin.name }}", version: "{{ plugin.version }}" }{{ "," if not loop.last else "" }}
{% else %}
    "{{ plugin.name }}"{{ "," if not loop.last else "" }}
{% endif %}
{% endfor %}
  ]

  # Plugin-specific configuration
{% for plugin in project.global_plugins %}
{% if plugin.configuration %}
  # Configuration for {{ plugin.name }}
{{ plugin.configuration | indent(2, first=True) }}

{% endif %}
{% endfor %}
{% endif %}
{% if global_provisioners %}

  # Global Provisioners
{% for provisioner in global_provisioners %}
  {{ provisioner.get_vagrant_config() | indent(2, first=True) }}

{% endfor %}
{% endif %}

{% for vm in project.vms %}

  # VM: {{ vm.name }}
  config.vm.define "{{ vm.name }}" do |{{ vm.name.replace('-', '_') }}|
    {{ vm.name.replace('-', '_') }}.vm.box = "{{ vm.box }}"
    {{ vm.name.replace('-', '_') }}.vm.hostname = "{{ vm.get_effective_hostname() }}"
    
    # VM Resources
    {{ vm.name.replace('-', '_') }}.vm.provider "libvirt" do |libvirt|
      libvirt.memory = {{ vm.memory }}
      libvirt.cpus = {{ vm.cpus }}
    end
{% if vm.network_interfaces %}
    
    # Network Configuration
{% for interface in vm.network_interfaces %}
    {{ interface.get_vagrant_config().replace('config.vm.network', vm.name.replace('-', '_') + '.vm.network') }}
{% endfor %}
{% endif %}
{% if vm.synced_folders %}
    
    # Synced Folders
{% for folder in vm.synced_folders %}
    {{ folder.get_vagrant_config().replace('config.vm.synced_folder', vm.name.replace('-', '_') + '.vm.synced_folder') }}
{% endfor %}
{% endif %}
{% if vm.provisioners %}
    
    # Provisioning
{% for provisioner in vm.provisioners %}
    {{ provisioner.get_vagrant_config().replace('config.vm.provision', vm.name.replace('-', '_') + '.vm.provision') }}
{% endfor %}
{% endif %}
{% if vm.plugins %}
    
    # VM-specific plugins
{% for plugin in vm.plugins %}
    {{ plugin.get_vagrant_config() | indent(4) }}
{% endfor %}
{% endif %}
  end
{% endfor %}

end
'''

    def __init__(self, template_string: str | None = None):
        """
        Initialize the VagrantfileGenerator.
        
        Args:
            template_string: Custom Jinja2 template (optional)
        """
        template_str = template_string or self.VAGRANTFILE_TEMPLATE
        
        # Setup Jinja2 environment
        self.env = Environment(
            loader=StringTemplateLoader(template_str),
            trim_blocks=True,
            lstrip_blocks=True
        )
        
        # Add custom filters
        self.env.filters['indent'] = self._indent_filter

    def _indent_filter(self, text: str, width: int = 4, first: bool = True) -> str:
        """Custom Jinja2 filter for indenting text."""
        lines = text.split('\n')
        indent = ' ' * width
        
        result = []
        for i, line in enumerate(lines):
            if line.strip():  # Don't indent empty lines
                if i == 0 and not first:
                    result.append(line)
                else:
                    result.append(indent + line)
            else:
                result.append(line)
        
        return '\n'.join(result)

    def generate(self, project: Project) -> Dict[str, Any]:
        """
        Generate a Vagrantfile from a Project configuration.
        
        Args:
            project: Project instance to generate from
            
        Returns:
            Dictionary with generated content and validation results
        """
        from datetime import datetime
        from .plugin_service import PluginService
        
        # Validate project first
        is_valid, errors, warnings = project.validate_for_generation()
        
        # Enrich global_plugins with full plugin details (including configuration)
        plugin_service = PluginService()
        enriched_plugins = []
        
        for plugin_config in project.global_plugins:
            try:
                # Try to get full plugin details by name
                full_plugin = plugin_service.get_plugin_by_name(plugin_config.name)
                if full_plugin:
                    # Create enriched plugin object with configuration
                    enriched_plugin = {
                        'name': plugin_config.name,
                        'version': plugin_config.version,
                        'configuration': full_plugin.configuration,
                        'is_deprecated': plugin_config.is_deprecated
                    }
                    enriched_plugins.append(enriched_plugin)
                else:
                    # Fallback to basic info if plugin not found
                    enriched_plugins.append({
                        'name': plugin_config.name,
                        'version': plugin_config.version,
                        'configuration': None,
                        'is_deprecated': plugin_config.is_deprecated
                    })
            except Exception as e:
                # If fetching fails, use basic info
                enriched_plugins.append({
                    'name': plugin_config.name,
                    'version': plugin_config.version,
                    'configuration': None,
                    'is_deprecated': plugin_config.is_deprecated
                })
        
        # Load global provisioners for this project
        from .global_provisioner_service import GlobalProvisionerService
        provisioner_service = GlobalProvisionerService()
        
        global_provisioners = []
        if project.global_provisioners:
            try:
                for provisioner_id in project.global_provisioners:
                    try:
                        provisioner = provisioner_service.get_provisioner(provisioner_id)
                        global_provisioners.append(provisioner)
                    except Exception as e:
                        warnings.append(f"Provisioner '{provisioner_id}' not found: {str(e)}")
            except Exception as e:
                warnings.append(f"Failed to load global provisioners: {str(e)}")
        
        # Generate content even if there are warnings
        content = ""
        if project.vms:  # Only generate if there are VMs
            try:
                template = self.env.get_template("")
                # Create a modified project dict with enriched plugins
                from types import SimpleNamespace
                project_dict = project.model_dump()
                project_dict['global_plugins'] = [SimpleNamespace(**p) for p in enriched_plugins]
                project_for_template = SimpleNamespace(**project_dict)
                # Convert VMs to proper namespace objects
                project_for_template.vms = project.vms
                
                content = template.render(
                    project=project_for_template,
                    global_provisioners=global_provisioners,
                    generation_timestamp=datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
                )
            except Exception as e:
                errors.append(f"Template generation error: {str(e)}")
                is_valid = False
        else:
            errors.append("Cannot generate Vagrantfile for project with no VMs")
            is_valid = False
        
        return {
            "content": content,
            "filename": "Vagrantfile",
            "validation": {
                "is_valid": is_valid,
                "errors": errors,
                "warnings": warnings
            }
        }

    def validate_syntax(self, content: str) -> Tuple[bool, List[str]]:
        """
        Validate the syntax of generated Vagrantfile content.
        
        Args:
            content: Vagrantfile content to validate
            
        Returns:
            Tuple of (is_valid, errors)
        """
        errors = []
        
        # Basic syntax checks
        if not content.strip():
            errors.append("Empty Vagrantfile content")
            return False, errors
        
        # Check for required elements
        if 'Vagrant.configure(' not in content:
            errors.append("Missing Vagrant.configure block")
        
        if 'config.vm.define' not in content:
            errors.append("No VM definitions found")
        
        # Check for balanced quotes and parentheses
        quote_count = content.count('"') - content.count('\\"')
        if quote_count % 2 != 0:
            errors.append("Unbalanced quotes in generated content")
        
        # Check for basic Ruby syntax patterns
        lines = content.split('\n')
        do_count = sum(1 for line in lines if ' do |' in line or ' do' in line.rstrip())
        end_count = sum(1 for line in lines if line.strip() == 'end')
        
        if do_count != end_count:
            errors.append(f"Unbalanced do/end blocks: {do_count} do blocks, {end_count} end blocks")
        
        is_valid = len(errors) == 0
        return is_valid, errors

    def generate_with_validation(self, project: Project) -> Dict[str, Any]:
        """
        Generate Vagrantfile with comprehensive validation.
        
        Args:
            project: Project instance to generate from
            
        Returns:
            Dictionary with generated content and validation results
        """
        result = self.generate(project)
        
        # Additional syntax validation if content was generated
        if result["content"]:
            syntax_valid, syntax_errors = self.validate_syntax(result["content"])
            
            if not syntax_valid:
                result["validation"]["is_valid"] = False
                result["validation"]["errors"].extend(syntax_errors)
        
        return result

    def preview_config(self, project: Project) -> Dict[str, Any]:
        """
        Generate a preview of the Vagrant configuration without full generation.
        
        Args:
            project: Project instance to preview
            
        Returns:
            Dictionary with configuration summary
        """
        vm_configs = []
        
        for vm in project.vms:
            vm_config = {
                "name": vm.name,
                "box": vm.box,
                "hostname": vm.get_effective_hostname(),
                "memory": vm.memory,
                "cpus": vm.cpus,
                "networks": len(vm.network_interfaces),
                "synced_folders": len(vm.synced_folders),
                "provisioners": len(vm.provisioners),
                "plugins": len(vm.plugins)
            }
            vm_configs.append(vm_config)
        
        return {
            "project_name": project.name,
            "vm_count": len(project.vms),
            "global_plugins": len(project.global_plugins),
            "vms": vm_configs,
            "total_network_interfaces": sum(len(vm.network_interfaces) for vm in project.vms),
            "total_synced_folders": sum(len(vm.synced_folders) for vm in project.vms),
            "total_provisioners": sum(len(vm.provisioners) for vm in project.vms)
        }

    def get_template_variables(self, project: Project) -> Dict[str, Any]:
        """
        Get all template variables that would be used in generation.
        
        Args:
            project: Project instance
            
        Returns:
            Dictionary of template variables
        """
        from datetime import datetime
        
        return {
            "project": project,
            "generation_timestamp": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC"),
            "vm_count": len(project.vms),
            "total_interfaces": sum(len(vm.network_interfaces) for vm in project.vms)
        }